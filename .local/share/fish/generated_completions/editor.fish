# editor
# Autogenerated from man page /usr/share/man/man1/editor.1.gz
complete -c editor -s c -d '{command} will be executed after the first file has been read'
complete -c editor -s S -d '{file} will be sourced after the first file has been read'
complete -c editor -l cmd -d 'Like using "-c", but the command is executed just before processing any vimrc…'
complete -c editor -s A -d 'If  Vim has been compiled with ARABIC support for editing right-to-left orien…'
complete -c editor -s b -d 'Binary mode'
complete -c editor -s C -d 'Compatible.   Set the \'compatible\' option'
complete -c editor -s d -d 'Start in diff mode.  There should between two to eight file name arguments'
complete -c editor -o dev -d 'Open {device} for use as a terminal.  Only on the Amiga'
complete -c editor -s D -d Debugging
complete -c editor -s e -d 'Start  Vim in Ex mode, just like the executable was called "ex"'
complete -c editor -s E -d 'Start  Vim in improved Ex mode, just like the executable was called "exim"'
complete -c editor -s f -d Foreground
complete -c editor -l nofork -d Foreground
complete -c editor -s F -d 'If  Vim has been compiled with FKMAP support for editing right-to-left orient…'
complete -c editor -s g -d 'If  Vim has been compiled with GUI support, this option enables the GUI'
complete -c editor -l gui-dialog-file -d 'When using the GUI, instead of showing a dialog, write the title and message …'
complete -c editor -l help -s h -s '?' -d 'Give a bit of help about the command line arguments and options'
complete -c editor -s H -d 'If  Vim has been compiled with RIGHTLEFT support for editing right-to-left or…'
complete -c editor -s i -d 'Specifies the filename to use when reading or writing the viminfo file, inste…'
complete -c editor -s L -d 'Same as -r'
complete -c editor -s l -d 'Lisp mode.  Sets the \'lisp\' and \'showmatch\' options on'
complete -c editor -s m -d 'Modifying files is disabled.  Resets the \'write\' option'
complete -c editor -s M -d 'Modifications not allowed'
complete -c editor -s N -d 'No-compatible mode.   Resets the \'compatible\' option'
complete -c editor -s n -d 'No swap file will be used.  Recovery after a crash will be impossible'
complete -c editor -o nb -d 'Become an editor server for NetBeans.   See the docs for details'
complete -c editor -s o -d 'Open N windows stacked.  When N is omitted, open one window for each file'
complete -c editor -s O -d 'Open N windows side by side'
complete -c editor -s p -d 'Open N tab pages.  When N is omitted, open one tab page for each file'
complete -c editor -s P -d 'Win32 GUI only: Specify the title of the parent application'
complete -c editor -s R -d 'Read-only mode.  The \'readonly\' option will be set'
complete -c editor -s r -d 'List swap files, with information about using them for recovery'
complete -c editor -s s -d 'Silent mode'
complete -c editor -s T -d 'Tells  Vim the name of the terminal you are using'
complete -c editor -l not-a-term -d 'Tells  Vim that the user knows that the input and/or output is not connected …'
complete -c editor -l ttyfail -d 'When stdin or stdout is not a a terminal (tty) then exit right away'
complete -c editor -s u -d 'Use the commands in the file {vimrc} for initializations'
complete -c editor -s U -d 'Use the commands in the file {gvimrc} for GUI initializations'
complete -c editor -s V -d Verbose
complete -c editor -l log -d 'If  Vim has been compiled with eval and channel feature, start logging and wr…'
complete -c editor -s v -d 'Start  Vim in Vi mode, just like the executable was called "vi"'
complete -c editor -s w -d 'All the characters that you type are recorded in the file {scriptout}, until …'
complete -c editor -s W -d 'Like -w, but an existing file is overwritten'
complete -c editor -s x -d 'Use encryption when writing files.   Will prompt for a crypt key'
complete -c editor -s X -d 'Don\'t connect to the X server'
complete -c editor -s y -d 'Start  Vim in easy mode, just like the executable was called "evim" or "eview"'
complete -c editor -s Z -d 'Restricted mode.   Works like the executable starts with "r"'
complete -c editor -l clean -d 'Do not use any personal configuration (vimrc, plugins, etc. )'
complete -c editor -l echo-wid -d 'GTK GUI only: Echo the Window ID on stdout'
complete -c editor -l literal -d 'Take file name arguments literally, do not expand wildcards'
complete -c editor -l noplugin -d 'Skip loading plugins.   Implied by -u NONE'
complete -c editor -l remote -d 'Connect to a Vim server and make it edit the files given in the rest of the a…'
complete -c editor -l remote-expr -d 'Connect to a Vim server, evaluate {expr} in it and print the result on stdout'
complete -c editor -l remote-send -d 'Connect to a Vim server and send {keys} to it'
complete -c editor -l remote-silent -d 'As --remote, but without the warning when no server is found'
complete -c editor -l remote-wait -d 'As --remote, but Vim does not exit until the files have been edited'
complete -c editor -l remote-wait-silent -d 'As --remote-wait, but without the warning when no server is found'
complete -c editor -l serverlist -d 'List the names of all Vim servers that can be found'
complete -c editor -l servername -d 'Use {name} as the server name'
complete -c editor -l socketid -d 'GTK GUI only: Use the GtkPlug mechanism to run gvim in another window'
complete -c editor -l startuptime -d 'During startup write timing messages to the file {fname}'
complete -c editor -l version -d 'Print version information and exit'
complete -c editor -s t -d 'The file to edit and the initial cursor position depends on a "tag", a sort o…'
complete -c editor -s q -d 'Start in quickFix mode'
complete -c editor -l windowid -d 'Win32 GUI only: Make gvim try to use the window {id} as a parent, so that it …'

